<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<property name="PATH" value="D:/pack/logs/%d/"/>
	<!--<property name="PATH" value="/data/pack/logs/%d/"/>-->
	<!--<property name="PATH" value="/usr/webapps/pack/logs/%d/"/>-->

	<!-- %m输出的信息, %p日志级别, %t线程名, %d日期, %c类的全名, %i索引 -->
	<!-- appender 是 configuration 的子节点,是负责写日志的组件 -->
	<!-- ConsoleAppender 把日志输出到控制台 -->
	<!--    <property name="CONSOLE_LOG_PATTERN" -->
	<!--               value="%date{yyyy-MM-dd HH:mm:ss} | %highlight(%-5level) | %boldYellow(%thread) | %boldGreen(%logger) | %msg%n"/> -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--<pattern>${CONSOLE_LOG_PATTERN}</pattern> -->
			<pattern>%date{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) (%file:%line\)- %m%n</pattern>
			<!-- 控制台也要使用 utf-8，不要使用 gbk -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- RollingFileAppender: 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	<!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是 sys.log -->
	<!-- 2.如果日期没有变化，但是当前日志文件的大小超过 10MB 时，对当前日志进行分割 重名名 -->
	<appender name="baselog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${PATH}base.log</File>
		<!-- rollingPolicy: 当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<!-- TimeBasedRollingPolicy: 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 活动文件的名字会根据 fileNamePattern 的值，每隔一段时间改变一次 -->
			<!-- 文件名：logs/sys.2017-12-05.0.log -->
			<fileNamePattern>${PATH}base.%d.%i.log</fileNamePattern>
			<!-- 每产生一个日志文件，该日志文件的保存期限为 30 天 -->
			<maxHistory>30</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- maxFileSize: 这是活动文件的大小，默认值是 10MB -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<!-- pattern 节点，用来设置日志的输入格式 -->
			<pattern>
				%d %p (%file:%line\)- %m%n
			</pattern>
			<!-- 记录日志的编码 -->
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
	</appender>

	<appender name="alllog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${PATH}all.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${PATH}all.%d.%i.log</fileNamePattern>
			<maxHistory>30</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>
				%d %p (%file:%line\)- %m%n
			</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 控制台日志输出级别 -->
	<root level="info">
		<appender-ref ref="STDOUT"/>
		<appender-ref ref="alllog"/>
	</root>

	<!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
	<!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE -->
	<logger name="per.kirito.pack.controller" level="INFO">
		<appender-ref ref="baselog"/>
	</logger>
	<logger name="per.kirito.pack.service.impl" level="INFO">
		<appender-ref ref="baselog"/>
	</logger>
	<logger name="per.kirito.pack.mapper" level="DEBUG">
		<appender-ref ref="baselog"/>
	</logger>
	<logger name="per.kirito.pack.util" level="INFO">
		<appender-ref ref="baselog"/>
	</logger>
	<logger name="per.kirito.pack.util.cron" level="INFO">
		<appender-ref ref="baselog"/>
	</logger>
</configuration>